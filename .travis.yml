# Use new container infrastructure to enable caching
sudo: false

# Choose a lightweight base image; we provide our own build tools.
language: haskell

# Caching so the next build will be fast too.
cache:
  directories:
  - $HOME/.stack

# The different configurations we want to test. We have BUILD=cabal which uses
# cabal-install, and BUILD=stack which uses Stack. More documentation on each
# of those below.
#
# We set the compiler values here to tell Travis to use a different
# cache file per set of arguments.
#
# If you need to have different apt packages for each combination in the
# matrix, you can use a line such as:
#     addons: {apt: {packages: [libfcgi-dev,libgmp-dev]}}
matrix:
  include:
  # The Stack builds. We can pass in arbitrary Stack arguments via the ARGS
  # variable, such as using --stack-yaml to point to a different file.
  # Nightly builds are allowed to fail
  - env: BUILD=stack ARGS=""
    compiler: ": #stack 8.0.1 OSX"
    os: osx

  allow_failures:
  - env: BUILD=stack ARGS="--resolver nightly"

before_install:

# Download and unpack the stack executable
- mkdir -p ~/.local/bin
- export PATH=~/.local/bin:$PATH
- |
  if [ `uname` = "Darwin" ]
  then
    travis_retry curl --insecure -L https://www.stackage.org/stack/osx-x86_64 | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin
  else
    travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
  fi

install:
  - set -ex
  - stack +RTS -N2 -RTS --no-terminal $ARGS setup
  - stack +RTS -N2 -RTS --no-terminal $ARGS build --only-snapshot
  - set +ex

script:
  - set -ex
  - stack --no-terminal $ARGS test --bench --no-run-benchmarks --haddock --no-haddock-deps
  - set +ex
